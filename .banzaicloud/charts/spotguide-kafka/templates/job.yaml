{{- if or (eq (.Values.brokers.ssl.mechanism) "External") (eq (.Values.brokers.ssl.mechanism) "Internal/External") }}
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: "{{ template "kafka-spotguide.fullname" . }}"
    chart: "{{ include "kafka-spotguide.chart" . }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  name: kafka-topic-acl-create
spec:
  template:
    spec:
      initContainers:
      - name: wait-kafka-to-start
        image: "solsson/kafka-initutils@sha256:c98d7fb5e9365eab391a5dcd4230fc6e72caf929c60f29ff091e3b0215124713"
        command: [ "/bin/bash", "-c", "until kubectl get pods -n kafka kafka-2 -o jsonpath='{.status.phase}' | grep -q Running; do echo waiting for kafka ; sleep 3 ; done ;"]
      containers:
      - name: create-acl-and-topic
        image: "{{.Values.image.repository}}:{{.Values.image.tag}}"
        command: [
          "bin/bash",
          "-c",
          "/opt/kafka/bin/kafka-acls.sh --authorizer-properties zookeeper.connect={{.Values.zk.url}} --add --allow-principal User:$(cat /scram-secret/username) --producer --topic spotguide-kafka && /opt/kafka/bin/kafka-acls.sh --authorizer-properties zookeeper.connect={{.Values.zk.url}} --add --allow-principal User:$(cat /scram-secret/username) --consumer --topic spotguide-kafka --group *",]
        volumeMounts:
        - name: secret-volume
          mountPath: /scram-secret
      restartPolicy: "OnFailure"
      serviceAccountName: "{{ template "kafka-spotguide.name" . }}"
      volumes:
      - name: secret-volume
        secret:
          secretName: "{{ include "repo-name" . }}-sasl"
{{- end }}